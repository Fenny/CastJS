"use strict";function _instanceof(e,t){return null!=t&&"undefined"!=typeof Symbol&&t[Symbol.hasInstance]?!!t[Symbol.hasInstance](e):e instanceof t}function _classCallCheck(e,t){if(!_instanceof(e,t))throw new TypeError("Cannot call a class as a function")}function _defineProperty(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var Castjs=function e(){var t=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(_classCallCheck(this,e),_defineProperty(this,"scanner",function(){if(!window.chrome)return console.warn("Castjs: Casting is not supported in this browser");var e=setInterval(function(){window.chrome.cast&&window.chrome.cast.isAvailable&&(clearInterval(e),t.init())},250)}),_defineProperty(this,"init",function(){cast.framework.CastContext.getInstance().setOptions({receiverApplicationId:t.receiver,autoJoinPolicy:t.joinpolicy}),t.player=new cast.framework.RemotePlayer,t.controller=new cast.framework.RemotePlayerController(t.player),t.controller.addEventListener("isConnectedChanged",t.isConnectedChanged),t.controller.addEventListener("currentTimeChanged",t.currentTimeChanged),t.controller.addEventListener("durationChanged",t.durationChanged),t.controller.addEventListener("volumeLevelChanged",t.volumeLevelChanged),t.controller.addEventListener("isMutedChanged",t.isMutedChanged),t.controller.addEventListener("isPausedChanged",t.isPausedChanged),t.controller.addEventListener("playerStateChanged",t.playerStateChanged),t.available=!0,t.trigger("available")}),_defineProperty(this,"isConnectedChanged",function(){setTimeout(function(){if(t.connected=t.player.isConnected,t.connected&&(t.trigger("connected"),t.player.isMediaLoaded)){for(var e in t.media={src:t.player.mediaInfo.contentId,poster:t.player.imageUrl||null,title:t.player.title||null,description:t.player.mediaInfo.metadata.subtitle||null,subtitles:[],progress:t.controller.getSeekPosition(t.player.currentTime,t.player.duration),time:t.controller.getFormattedTime(t.player.currentTime),duration:t.controller.getFormattedTime(t.player.duration),volume:t.player.volumeLevel,muted:t.player.isMuted,state:t.player.playerState.toLowerCase()},t.player.mediaInfo.tracks)"TEXT"===t.player.mediaInfo.tracks[e].type&&t.media.subtitles.push({label:t.player.mediaInfo.tracks[e].name,src:t.player.mediaInfo.tracks[e].trackContentId});var r=cast.framework.CastContext.getInstance().getCurrentSession().getSessionObj().media[0].activeTrackIds;r.length&&t.media.subtitles[r[0]]&&(t.media.subtitles[r[0]].active=!0),t.trigger("session",t.media)}})}),_defineProperty(this,"currentTimeChanged",function(){t.media.progress=t.controller.getSeekPosition(t.player.currentTime,t.player.duration),t.media.time=t.controller.getFormattedTime(t.player.currentTime),t.media.duration=t.controller.getFormattedTime(t.player.duration),t.trigger("time",{progress:t.media.progress,time:t.media.time,duration:t.media.duration}),t.media.progress>=100&&(t.trigger("ended"),t.disconnect())}),_defineProperty(this,"durationChanged",function(){t.media.duration=t.player.duration}),_defineProperty(this,"volumeLevelChanged",function(){t.media.volume=t.player.volumeLevel,t.trigger("volume",t.media.volume)}),_defineProperty(this,"isMutedChanged",function(){t.media.muted=t.player.isMuted,t.trigger("muted",t.media.muted)}),_defineProperty(this,"isPausedChanged",function(){t.media.paused=t.player.isPaused,t.this("paused",t.media.paused)}),_defineProperty(this,"playerStateChanged",function(){t.media.state=t.player.playerState.toLowerCase(),"idle"===t.media.state&&(t.media.state="disconnected"),t.trigger("state",t.media.state)}),_defineProperty(this,"on",function(e,r){t.events[e]||(t.events[e]=[]),t.events[e].push(r)}),_defineProperty(this,"off",function(e,r){if(!e)return t.events={};if(t.events[e]){if(void 0===r||"*"===r)return t.events[e]=[];for(var n in t.events[e])if(t.events[e][n]===r){t.events[e].splice(n,1);break}}}),_defineProperty(this,"trigger",function(e,r){for(var n in t.events[e])t.events[e][n](r)}),_defineProperty(this,"cast",function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!e)return t.trigger("error","No media source specified.");for(var n in r.source=e,r)r.hasOwnProperty(n)&&(t.media[n]=r[n]);cast.framework.CastContext.getInstance().requestSession().then(function(){if(!cast.framework.CastContext.getInstance().getCurrentSession())return t.trigger("error","Could not connect with the cast device");var e=new chrome.cast.media.MediaInfo(t.media.source);if(e.metadata=new chrome.cast.media.GenericMediaMetadata,t.media.subtitles.length){e.textTrackStyle=new chrome.cast.media.TextTrackStyle,e.textTrackStyle.fontFamily="Arial",e.textTrackStyle.foregroundColor="#FFFFFF",e.textTrackStyle.backgroundColor="#00000000",e.textTrackStyle.fontScale="1.1",e.textTrackStyle.edgeColor="#00000099",e.textTrackStyle.edgeType="DROP_SHADOW";var r=[];for(var n in t.media.subtitles){var i=new chrome.cast.media.Track(n,"TEXT");i.trackContentId=t.media.subtitles[n].src,i.trackContentType="text/vtt",i.subtype="CAPTIONS",i.name=t.media.subtitles[n].label,r.push(i)}e.tracks=r}e.metadata.images=[{url:t.media.poster}],e.metadata.title=t.media.title,e.metadata.subtitle=t.media.description;var a=new chrome.cast.media.LoadRequest(e);if(a.currentTime=t.media.time,a.autoplay=!t.media.paused,t.media.subtitles.length)for(var n in t.media.subtitles)if(t.media.subtitles[n].active){a.activeTrackIds=[n];break}cast.framework.CastContext.getInstance().getCurrentSession().loadMedia(a).then(function(){t.trigger("connected"),t.trigger("session",t.media)},function(e){t.trigger("error",e)})},function(e){t.trigger("error",e)})}),_defineProperty(this,"seek",function(e){t.player.currentTime=t.controller.getSeekTime(e,t.player.duration),t.controller.seek()}),_defineProperty(this,"volume",function(e){t.player.volumeLevel=e,t.controller.setVolumeLevel()}),_defineProperty(this,"play",function(){t.player.isPaused&&t.controller.playOrPause()}),_defineProperty(this,"pause",function(){t.player.isPaused||t.controller.playOrPause()}),_defineProperty(this,"mute",function(e){!0===e&&!1===t.media.muted?t.controller.muteOrUnmute():!1===e&&!0===t.media.muted&&t.controller.muteOrUnmute()}),_defineProperty(this,"subtitle",function(e){var r=new chrome.cast.media.EditTracksInfoRequest([e]);for(var n in cast.framework.CastContext.getInstance().getCurrentSession().getSessionObj().media[0].editTracksInfo(r,null,null),t.media.subtitles)delete t.media.subtitles[n].active,n===e&&(t.media.subtitles[n].active=!0)}),_defineProperty(this,"disconnect",function(){cast.framework.CastContext.getInstance().endCurrentSession(!0),t.controller.stop(),t.media=Object.assign({},self.template),t.connected=!1,t.media.state="disconnected",t.trigger("disconnected")}),!_instanceof(this,e))return console.warn("Castjs: don't invoke Castjs without 'new'"),new e(r);this.receiver=r.receiver||"CC1AD845",this.joinpolicy=r.joinpolicy||"origin_scoped",this.available=!1,this.connected=!1,this.player=null,this.controller=null,this.events={},self.template={source:null,poster:null,title:null,description:null,subtitles:[],progress:0,time:0,duration:0,volume:.3,muted:!1,paused:!1,state:"disconnected"},this.media=Object.assign({},self.template),this.scanner()};
